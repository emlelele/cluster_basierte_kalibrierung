import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

"""
Hier wird aus den Haushaltslastdaten des Standardlasprofils
von 2025 (H25) das durchschnittliche Wochenprofil gebildet.
Anschließend werden die Profile und die Haushaltsprofile vom Fraunhofer iee
miteinander verglichen. Ahnliches passiert auch in "vergleichsanalysen.py"
"""


# --- Parameter ---
SAMPLE_SIZE = 500  # Anzahl der Haushalte je Summen-Profil
ANNUAL_ENERGY_KWH = 4_000  # Ziel-Jahresverbrauch in kWh
HOURS_PER_WEEK = 168
WEEKS = 52
# ------------------

# 1) Summen-Zeitreihen einlesen (n_iterations × 8760 Stunden)
df_sum = pd.read_csv(
    "/home/emre/MA/PycharmProjects/cluster_kalibrierung/mwe_db_access/data/summenzeitreihen.csv"
)  # jede Zeile = Summe von 500 Haushalten

# 2) Auf Einzelhaushalt-Basis bringen und über Iterationen mitteln
#    → ergibt Serie der Länge 8760 Stunden
avg_per_household = df_sum.mean(axis=0) / SAMPLE_SIZE

# 3) Nur volle Wochen verwenden (52 × 168 = 8736 Stunden)
series_8736 = avg_per_household.values[: WEEKS * HOURS_PER_WEEK]

# 4) In Matrix umformen: Zeilen = Wochen, Spalten = Stunden (0…167)
week_matrix = series_8736.reshape(WEEKS, HOURS_PER_WEEK)

# 5) Durchschnitts-Woche berechnen (Mittelung über alle 52 Wochen)
avg_week = week_matrix.mean(axis=0)  # Länge = 168

# 6) Auf 4000 kWh/Jahr normieren
#    Summe über avg_week * 52 Wochen = aktueller Jahresverbrauch in Wh
current_annual_wh = avg_week.sum() * WEEKS
scale = (ANNUAL_ENERGY_KWH * 1_000) * 1_000 / current_annual_wh
normalized_week = avg_week * scale

# 7) Ergebnis in DataFrame + Plot
hour_index = np.arange(HOURS_PER_WEEK)
df_week = pd.DataFrame({"hour_of_week": hour_index, "load_wh": normalized_week})

plt.figure(figsize=(10, 4))
plt.plot(df_week["hour_of_week"], df_week["load_wh"])
plt.xlabel("Stunde der Woche")
plt.ylabel("Last (kWh)")
plt.title("Durchschnittliche Wochen-Zeitreihe, normiert auf 4 000 kWh/a für iee-Daten")
plt.grid(True, linestyle="--", alpha=0.5)
plt.tight_layout()
plt.show()


# --- 1. Deine Daten einfügen ---
WT_Jan = np.array(
    [
        20.126,
        18.915,
        17.959,
        17.202,
        16.612,
        16.077,
        15.796,
        15.300,
        15.287,
        15.143,
        15.025,
        14.934,
        15.018,
        14.938,
        14.943,
        14.958,
        15.216,
        15.368,
        15.674,
        16.221,
        16.820,
        17.160,
        18.039,
        19.089,
        20.971,
        22.609,
        23.816,
        24.573,
        25.042,
        25.241,
        25.078,
        24.630,
        23.976,
        23.848,
        23.238,
        22.944,
        22.673,
        22.767,
        22.682,
        22.658,
        22.558,
        22.690,
        22.964,
        23.420,
        24.061,
        24.863,
        25.576,
        25.998,
        26.174,
        26.229,
        26.313,
        26.255,
        26.138,
        26.006,
        26.094,
        25.821,
        25.455,
        25.443,
        25.311,
        25.408,
        25.858,
        25.975,
        26.285,
        26.865,
        28.065,
        29.198,
        30.509,
        32.156,
        34.769,
        36.779,
        38.382,
        39.899,
        40.960,
        41.542,
        41.918,
        42.120,
        41.957,
        41.543,
        41.007,
        40.382,
        39.532,
        38.319,
        36.864,
        35.746,
        34.904,
        33.979,
        32.907,
        32.539,
        32.068,
        30.435,
        28.895,
        27.388,
        26.006,
        24.477,
        23.115,
        21.764,
    ]
)
SA_Jan = np.array(
    [
        22.152,
        20.809,
        19.757,
        18.889,
        18.217,
        17.530,
        16.988,
        16.399,
        16.199,
        15.893,
        15.660,
        15.442,
        15.398,
        15.219,
        15.102,
        15.029,
        15.190,
        15.066,
        15.097,
        15.312,
        15.366,
        15.192,
        15.338,
        15.819,
        16.806,
        17.632,
        18.582,
        19.477,
        21.015,
        22.340,
        23.947,
        25.491,
        26.837,
        28.317,
        29.179,
        30.038,
        30.834,
        31.737,
        32.301,
        32.771,
        33.451,
        34.172,
        34.721,
        35.472,
        36.638,
        37.602,
        38.463,
        38.883,
        38.394,
        37.981,
        37.549,
        37.194,
        36.759,
        36.299,
        36.095,
        35.686,
        35.325,
        35.331,
        35.305,
        35.132,
        35.158,
        35.179,
        35.203,
        35.450,
        36.116,
        36.902,
        37.761,
        38.927,
        40.646,
        42.110,
        43.119,
        43.955,
        44.419,
        44.443,
        44.085,
        43.524,
        42.928,
        42.060,
        41.173,
        40.164,
        39.182,
        37.781,
        36.282,
        35.381,
        34.692,
        33.815,
        32.837,
        32.768,
        32.678,
        31.368,
        30.280,
        28.952,
        27.554,
        26.256,
        25.052,
        23.942,
    ]
)
FT_Jan = np.array(
    [
        23.148,
        21.985,
        21.147,
        20.385,
        19.650,
        18.998,
        18.366,
        17.667,
        17.458,
        17.009,
        16.678,
        16.363,
        16.273,
        16.054,
        15.836,
        15.633,
        15.587,
        15.410,
        15.451,
        15.711,
        15.734,
        15.488,
        15.586,
        15.829,
        16.479,
        17.096,
        17.725,
        18.318,
        19.524,
        20.477,
        21.807,
        23.378,
        24.845,
        26.510,
        27.711,
        29.097,
        30.411,
        31.831,
        33.055,
        34.138,
        35.270,
        36.411,
        37.509,
        38.639,
        40.229,
        41.956,
        43.102,
        43.267,
        42.412,
        41.629,
        40.929,
        40.234,
        39.285,
        38.454,
        37.916,
        37.256,
        36.620,
        36.248,
        35.975,
        35.742,
        35.661,
        35.535,
        35.443,
        35.510,
        35.971,
        36.601,
        37.744,
        39.180,
        41.049,
        42.745,
        43.824,
        44.772,
        45.425,
        45.408,
        44.996,
        44.516,
        43.908,
        43.029,
        42.104,
        41.284,
        40.326,
        38.780,
        37.117,
        35.866,
        34.922,
        33.772,
        32.722,
        32.514,
        31.952,
        30.218,
        28.724,
        27.290,
        25.946,
        24.485,
        23.093,
        21.670,
    ]
)

WT_Feb = np.array(
    [
        20.279,
        19.097,
        18.220,
        17.504,
        16.932,
        16.422,
        16.191,
        15.718,
        15.760,
        15.624,
        15.535,
        15.471,
        15.553,
        15.497,
        15.522,
        15.558,
        15.845,
        16.032,
        16.342,
        16.951,
        17.561,
        17.922,
        18.820,
        19.930,
        21.877,
        23.571,
        24.854,
        25.612,
        25.863,
        25.844,
        25.419,
        24.933,
        24.316,
        24.111,
        23.498,
        23.083,
        22.810,
        22.818,
        22.707,
        22.608,
        22.388,
        22.336,
        22.572,
        22.887,
        23.652,
        24.321,
        24.965,
        25.326,
        25.360,
        25.319,
        25.225,
        25.073,
        24.856,
        24.774,
        24.732,
        24.425,
        23.980,
        23.892,
        23.777,
        23.886,
        24.258,
        24.312,
        24.493,
        24.876,
        25.800,
        26.565,
        27.470,
        28.652,
        30.620,
        32.488,
        34.477,
        37.045,
        39.350,
        41.044,
        42.029,
        42.586,
        42.553,
        42.234,
        41.657,
        41.109,
        40.168,
        38.885,
        37.418,
        36.209,
        35.244,
        34.247,
        33.175,
        32.739,
        32.112,
        30.464,
        28.938,
        27.413,
        26.162,
        24.601,
        23.238,
        21.929,
    ]
)
SA_Feb = np.array(
    [
        22.247,
        20.913,
        20.014,
        19.230,
        18.547,
        17.910,
        17.457,
        16.879,
        16.723,
        16.461,
        16.292,
        16.124,
        16.131,
        16.001,
        15.955,
        15.896,
        16.055,
        16.000,
        16.029,
        16.319,
        16.316,
        16.189,
        16.318,
        16.830,
        17.853,
        18.696,
        19.843,
        20.779,
        22.409,
        23.933,
        25.589,
        27.305,
        28.918,
        30.249,
        30.952,
        31.521,
        32.089,
        32.844,
        33.290,
        33.821,
        34.244,
        34.756,
        35.179,
        35.682,
        36.633,
        37.440,
        38.260,
        38.450,
        37.755,
        37.162,
        36.506,
        35.998,
        35.484,
        35.145,
        34.935,
        34.301,
        33.945,
        33.714,
        33.627,
        33.553,
        33.571,
        33.669,
        33.588,
        33.535,
        33.829,
        34.278,
        34.786,
        35.537,
        36.862,
        38.272,
        39.983,
        41.944,
        43.379,
        44.369,
        44.427,
        43.993,
        43.492,
        42.616,
        41.705,
        40.702,
        39.696,
        38.354,
        36.831,
        35.855,
        35.117,
        34.242,
        33.268,
        33.073,
        32.964,
        31.638,
        30.534,
        29.122,
        27.753,
        26.461,
        25.252,
        24.174,
    ]
)
FT_Feb = np.array(
    [
        23.030,
        21.688,
        20.821,
        20.060,
        19.356,
        18.708,
        18.112,
        17.474,
        17.413,
        17.088,
        16.829,
        16.648,
        16.613,
        16.487,
        16.328,
        16.214,
        16.231,
        16.080,
        16.161,
        16.556,
        16.616,
        16.403,
        16.554,
        16.878,
        17.584,
        18.324,
        19.174,
        19.951,
        21.397,
        22.701,
        24.679,
        26.660,
        28.564,
        30.392,
        31.606,
        32.882,
        34.004,
        35.386,
        36.527,
        37.512,
        38.359,
        39.382,
        40.243,
        41.256,
        42.744,
        44.122,
        44.960,
        44.797,
        43.398,
        42.366,
        41.088,
        39.928,
        38.624,
        37.744,
        37.059,
        36.247,
        35.544,
        35.033,
        34.699,
        34.295,
        34.063,
        33.785,
        33.547,
        33.457,
        33.589,
        33.930,
        34.605,
        35.583,
        36.984,
        38.764,
        40.531,
        42.578,
        44.502,
        45.560,
        45.793,
        45.703,
        44.974,
        44.086,
        43.093,
        42.191,
        41.220,
        39.523,
        37.758,
        36.342,
        35.355,
        34.186,
        33.043,
        32.766,
        32.038,
        30.273,
        28.667,
        27.192,
        25.939,
        24.435,
        23.081,
        21.763,
    ]
)

WT_Dec = np.array(
    [
        19.959,
        18.710,
        17.714,
        16.939,
        16.339,
        15.803,
        15.461,
        14.982,
        14.949,
        14.824,
        14.727,
        14.653,
        14.708,
        14.630,
        14.673,
        14.674,
        14.979,
        15.120,
        15.462,
        15.972,
        16.608,
        16.961,
        17.819,
        18.980,
        21.092,
        22.695,
        23.990,
        24.942,
        25.666,
        26.044,
        25.949,
        25.658,
        25.044,
        24.858,
        24.296,
        23.919,
        23.697,
        23.545,
        23.509,
        23.548,
        23.444,
        23.536,
        23.859,
        24.214,
        24.911,
        25.657,
        26.300,
        26.682,
        26.751,
        26.816,
        26.951,
        26.847,
        26.603,
        26.656,
        26.697,
        26.452,
        26.185,
        26.207,
        26.211,
        26.498,
        27.040,
        27.334,
        27.888,
        28.669,
        30.347,
        31.919,
        33.722,
        35.577,
        37.795,
        39.068,
        39.869,
        40.882,
        41.695,
        42.181,
        42.432,
        42.663,
        42.523,
        42.133,
        41.645,
        41.106,
        40.299,
        39.178,
        37.807,
        36.678,
        35.726,
        34.839,
        33.740,
        33.268,
        32.613,
        30.897,
        29.319,
        27.745,
        26.372,
        24.753,
        23.311,
        21.911,
    ]
)
SA_Dec = np.array(
    [
        21.650,
        20.225,
        19.131,
        18.234,
        17.523,
        16.867,
        16.358,
        15.738,
        15.536,
        15.267,
        15.079,
        14.912,
        14.867,
        14.768,
        14.730,
        14.664,
        14.825,
        14.800,
        14.858,
        15.079,
        15.212,
        15.147,
        15.361,
        15.923,
        17.002,
        17.895,
        18.813,
        19.716,
        21.262,
        22.661,
        24.201,
        25.754,
        26.985,
        28.374,
        29.236,
        30.103,
        30.729,
        31.605,
        32.060,
        32.537,
        33.197,
        33.819,
        34.435,
        35.054,
        35.943,
        36.843,
        37.621,
        37.934,
        37.400,
        37.121,
        36.815,
        36.548,
        36.090,
        35.790,
        35.636,
        35.238,
        35.102,
        35.101,
        35.166,
        35.157,
        35.397,
        35.414,
        35.669,
        36.019,
        37.021,
        38.158,
        39.406,
        40.744,
        41.883,
        42.721,
        43.202,
        43.513,
        43.591,
        43.361,
        42.864,
        42.200,
        41.484,
        40.593,
        39.700,
        38.716,
        37.954,
        36.818,
        35.562,
        34.735,
        34.121,
        33.380,
        32.646,
        32.337,
        32.243,
        31.140,
        30.109,
        28.721,
        27.573,
        26.350,
        25.214,
        24.158,
    ]
)
FT_Dec = np.array(
    [
        22.812,
        21.446,
        20.393,
        19.526,
        18.770,
        18.068,
        17.449,
        16.786,
        16.575,
        16.206,
        15.933,
        15.695,
        15.618,
        15.454,
        15.278,
        15.138,
        15.175,
        15.008,
        15.086,
        15.329,
        15.461,
        15.287,
        15.484,
        15.797,
        16.683,
        17.404,
        18.116,
        18.899,
        20.319,
        21.471,
        23.107,
        24.892,
        26.521,
        28.386,
        29.839,
        31.353,
        32.724,
        34.214,
        35.449,
        36.624,
        37.719,
        38.855,
        39.919,
        41.022,
        42.492,
        44.022,
        45.003,
        45.113,
        43.942,
        43.021,
        42.067,
        41.011,
        39.813,
        38.974,
        38.527,
        37.799,
        37.125,
        36.837,
        36.594,
        36.280,
        36.280,
        36.182,
        36.201,
        36.333,
        37.019,
        37.909,
        39.044,
        40.394,
        41.755,
        42.553,
        43.057,
        43.646,
        43.776,
        43.778,
        43.485,
        43.114,
        42.549,
        41.881,
        41.123,
        40.236,
        39.541,
        38.321,
        36.883,
        35.752,
        34.865,
        33.982,
        32.912,
        32.604,
        32.029,
        30.450,
        29.045,
        27.585,
        26.319,
        24.836,
        23.402,
        21.995,
    ]
)

# --- 2. Monatliche Mittelwerte je Tagetyp ---
WT_avg = (WT_Jan + WT_Feb + WT_Dec) / 3
SA_avg = (SA_Jan + SA_Feb + SA_Dec) / 3
FT_avg = (FT_Jan + FT_Feb + FT_Dec) / 3

# --- 3. Typische Winterwoche (Start Samstag) ---
week_qh = np.concatenate(
    [
        SA_avg,  # Samstag
        FT_avg,  # Sonntag/Feiertag
        np.tile(WT_avg, 5),  # Montag–Freitag
    ]
)

# --- 4. Aggregation Viertelstunde → Stunde ---
week_hourly = week_qh.reshape(-1, 4).sum(axis=1)

# --- 5. Skalierung auf 4000 kWh/a ---
# Jahresenergie aus dem Profil: Wochenenergie × 52
annual_energy = week_hourly.sum() * 52
scale_factor = 4000 / annual_energy
week_hourly_scaled = week_hourly * scale_factor

# --- 6. Plotten ---
plt.figure(figsize=(10, 4))
plt.plot(week_hourly_scaled)
plt.xlabel("Stunde der Woche")
plt.ylabel("Last [kWh]")
plt.title("Typische Winterwoche H25 (4000 kWh/Jahr)")
plt.tight_layout()
plt.show()


plt.figure(figsize=(10, 4))

# 1. Durchschnittliche Woche in kWh
plt.plot(
    df_week["hour_of_week"],
    df_week["load_wh"] / 1_000,
    label="Durchschnittliche Woche (iee)",
    linewidth=2,
)

# 2. Typische Winterwoche in kWh (ist bereits in kWh skaliert)
plt.plot(
    df_week["hour_of_week"],
    week_hourly_scaled * 1_000,
    label="Durchschnittliche Woche (H25)",
    linewidth=2,
    linestyle="--",
)

plt.ylabel("Last [Wh]")
plt.xlabel("Stunde der Woche")
plt.ylabel("Last [Wh]")
plt.title("Vergleich: Durchschnittliche Woche (iee) vs. Durchschnittliche Woche (H25)")
plt.xticks(range(0, 169, 24), [str(i) for i in range(0, 169, 24)])

plt.legend()
plt.grid(True, linestyle="--", alpha=0.5)
plt.tight_layout()
plt.show()

# Fürs Beispiel nehme ich Platzhalter:
y_true = df_week["load_wh"].values / 1000
y_pred = week_hourly_scaled

# --- 1) Klassische Fehlerkennzahlen ---
# a) MAE
mae = np.mean(np.abs(y_true - y_pred))

# b) RMSE
rmse = np.sqrt(np.mean((y_true - y_pred) ** 2))

# c) MAPE  (in %; Achtung: Division durch null vermeiden!)
#    Wir maskieren Stellen, wo y_true == 0
mask = y_true != 0
mape = np.mean(np.abs((y_true[mask] - y_pred[mask]) / y_true[mask])) * 100

print(f"MAE  = {mae:.3f} Wh")
print(f"RMSE = {rmse:.3f} Wh")
print(f"MAPE = {mape:.2f} %")

# --- 2) Peak-Analyse ---
# a) Peak-Magnitude und Zeitpunkt für y_true
idx_true_peak = np.argmax(y_true)
peak_true = y_true[idx_true_peak]

# b) Peak-Magnitude und Zeitpunkt für y_pred
idx_pred_peak = np.argmax(y_pred)
peak_pred = y_pred[idx_pred_peak]

# c) Timing-Abweichung zwischen den Peaks (in Stunden)
time_shift = idx_pred_peak - idx_true_peak

print("\nPeak-Analyse:")
print(f"Referenz-Peak: {peak_true:.3f} Wh bei Stunde {idx_true_peak}")
print(f"Validierungs-Peak: {peak_pred * 1000:.3f} Wh bei Stunde {idx_pred_peak}")
print(f"Verschiebung: {time_shift:+d} Stunden")

energy_true_week = np.sum(y_true)  # Summe über 168 Stunden
energy_pred_week = np.sum(y_pred)

print(f"Wöchentliche Energie Referenz: {energy_true_week:.1f} Wh")
print(f"Wöchentliche Energie Validierung: {energy_pred_week:.1f} kWh")

# --- 2) Jahresenergie (kWh) ---
energy_true_year = energy_true_week * 52
energy_pred_year = energy_pred_week * 52
